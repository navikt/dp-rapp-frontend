name: Build and deploy to dev

on:
  #push funker ikke pga build-docker-image actionen krever enviroment variabel
  #push:
   # branches:
    #  - 'main'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Miljø (støtter q1 og q2)'
        required: true
        default: 'q2'
      bump_patch:
        description: 'Skriv "bump" her for å bygge release og øke patchversjon på snapshot. Kun for main branch.'
        required: false
        default: ''

env:
  REPONAME: ${{ github.event.repository.name }}
  APPNAME: ${{ github.event.repository.name }}
  ENVIRONMENT: ${{ github.event.inputs.environment }}
  CLUSTER: dev-gcp
  NAIS_FILE: .nais/nais.yaml
  MAIN_BRANCH: refs/heads/main

jobs:
  calculateVersion:
    name: Calculate version
    runs-on: ubuntu-latest
    outputs:
      currentVersion: ${{ steps.packageVersion.outputs.current-version }}
      releaseVersion: ${{ steps.releaseVersion.outputs.version }}
      imageName: ghcr.io/${{ github.repository }}/${{ env.REPONAME }}:${{ github.sha }}
    steps:
      - name: Check if correct branch
        if: github.event.inputs.bump_patch == 'bump' && github.ref != env.MAIN_BRANCH
        run: |
          echo "Release skal kun bygges fra ${{ env.MAIN_BRANCH }} branch!"
          exit 1

      - name: Checkout
        uses: actions/checkout@v3

      - name: Read version from package.json
        id: packageVersion
        uses: martinbeentjes/npm-get-version-action@master

      # Version blir eksisterende versjon fra package.json uten -SNAPSHOT
      # For release:  eks 1.0.1
      # For snapshot: eks 1.0.1-20220104111118
      - name: Calculate release version
        uses: slime-hatena/semantic-versioning-calculator-action@main
        id: releaseVersion
        with:
          version: ${{ steps.packageVersion.outputs.current-version }}
          increment_major: 'false'
          increment_minor: 'false'
          increment_patch: 'false'
          prerelease: ${{ steps.snapshotTimestamp.outputs.timestamp }}

  buildAndtest:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [ calculateVersion ]
    steps:
      - name: Set default environment for push
        if: github.event_name == 'push' && github.ref == env.MAIN_BRANCH
        run: echo "ENVIRONMENT=q2" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: 'https://npm.pkg.github.com'

      - name: Set snapshot timestamp
        id: snapshotTimestamp
        if: github.event.inputs.bump_patch != 'bump'
        run: |
          echo "timestamp=$(date +'%Y%m%d%H%M%S')" >>$GITHUB_OUTPUT

      - name: Set release version in package.json
        run: |
          jq '.version="${{ needs.calculateVersion.outputs.releaseVersion }}"' package.json > package.json.new
          mv package.json.new package.json

      - name: Install npm packages
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READER_TOKEN }}

      - name: Build application
        run: npm run build

      - name: Test application
        run: npm run test

  createDockerImage:
    name: Create Docker image
    runs-on: ubuntu-latest
    needs: [ calculateVersion ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build Docker image
        run: |
          echo //npm.pkg.github.com/:_authToken=${{ secrets.READER_TOKEN }} >> .npmrc
          if [[ ${{ env.ENVIRONMENT }} == 'p' ]]; then
            echo NAV_DEKORATOREN_ENV=prod >> .env.production
          else
            echo NAV_DEKORATOREN_ENV=dev >> .env.production
          fi
          docker build -t ${{ needs.calculateVersion.outputs.imageName }} .

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image
        run: |
          docker push ${{ needs.calculateVersion.outputs.imageName }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [ calculateVersion, buildAndtest, createDockerImage ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Deploy to dev
        if: env.ENVIRONMENT == 'q1' || env.ENVIRONMENT == 'q2' || (github.event_name == 'push' && github.ref == env.MAIN_BRANCH)
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          PRINT_PAYLOAD: true
          CLUSTER: ${{ env.CLUSTER }}
          RESOURCE: ${{ env.NAIS_FILE }}
          VAR: image=${{ needs.calculateVersion.outputs.imageName }},appName=${{ env.APPNAME }}
          VARS: .nais/vars-${{ env.ENVIRONMENT }}.yaml
          WAIT: false

      - name: Archive files in .nais
        if: github.event.inputs.bump_patch == 'bump' && github.ref == env.MAIN_BRANCH
        uses: thedoctor0/zip-release@master
        with:
          path: .nais
          filename: '${{ env.REPONAME }}-${{ needs.calculateVersion.outputs.releaseVersion }}.zip'

      - name: Create release
        if: github.event.inputs.bump_patch == 'bump' && github.ref == env.MAIN_BRANCH
        uses: ncipollo/release-action@v1
        with:
          tag: 'v${{ needs.calculateVersion.outputs.releaseVersion }}'
          artifacts: '${{ env.REPONAME }}-${{ needs.calculateVersion.outputs.releaseVersion }}.zip'
          token: ${{ secrets.GITHUB_TOKEN }}

      # Next version blir eksisterende versjon + 0.0.1, med postfix -SNAPSHOT
      - name: Calculate next version
        if: github.event.inputs.bump_patch == 'bump' && github.ref == env.MAIN_BRANCH
        uses: slime-hatena/semantic-versioning-calculator-action@main
        id: nextReleaseVersion
        with:
          version: ${{ needs.calculateVersion.outputs.currentVersion }}
          increment_major: 'false'
          increment_minor: 'false'
          increment_patch: 'true'
          prerelease: 'SNAPSHOT'

      # Hvis det er ny versjon, oppdater package.json og utfør git commit/push
      - name: Set next version in package.json
        if: github.event.inputs.bump_patch == 'bump' && github.ref == env.MAIN_BRANCH
        run: |
          jq '.version="${{ needs.calculateVersion.outputs.releaseVersion }}"' package.json > package.json.new
          mv package.json.new package.json

      - name: Commit bumped version
        if: github.event.inputs.bump_patch == 'bump' && github.ref == env.MAIN_BRANCH
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          git commit -m "Bump version fra Github Actions" -a
          git tag -a ${{ env.REPONAME }}-${{ needs.calculateVersion.outputs.releaseVersion }} -m ${{ env.REPONAME }}-${{ needs.calculateVersion.outputs.releaseVersion }}

      - name: Push changes
        if: github.event.inputs.bump_patch == 'bump' && github.ref == env.MAIN_BRANCH
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
